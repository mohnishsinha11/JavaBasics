1. Introduction
2. The ways to make object eligible for Garbage Collection
    1. Nullifying the reference variable
    2. Reassign the reference variable
    3. Objects created inside a method
    4. Island of Isolation(very imp)
3.The methods for requesting JVM  to run Garbage Collector
    1. System.gc()
    2. Runtime class gc()
4. Finalization

----------------------------------------------
-> Garbage Collector is part of JVM and responsibility of Garbage Collector is to destroy useless objects
-> Garbage collector is Daemon thread
-> Java is robust and GC is one of the reason for that. It protects java application against out of memory problems.
-> An object is eligible for garbage collection if and only if it doesn't contain any reference variable.

Following are various ways to make object eligible for GC

1. Nullifying the object: If an object no longer required then assign null to all its null variables. Then the object
   is automatically eligible to GC.

2. Reassigning the reference variable: If an object is no longer required then reassign the reference to another object.
   In this way we can make the earlier object eligible for GC.

3. Objects created inside a method are by default eligible for GC once the method execution is over.(Scope is over)

4. Island of Isolation:
    class Test{
        Test i;
        psvm(String args[]){
            Test t1 = new Test();
            Test t2 = new Test();
            Test t3 = new Test();
            // at this point of time 0 objects are eligible for GC

            t1.i = t2;
            t2.i = t3;
            t3.i = t1;

            t1 = null; // at this point of time 0 objects are eligible for GC since we can access object1 using t3 reference;
            t2 = null; // at this point of time 0 objects are eligible for GC;
            t3 = null; // at this point of time all 3 objects are eligible for GC since all 3 objects are isolated from external
                       // references even though they are connected internally.
        }
    }

    Note:
        1. If an object doesn't contain any reference variable then it is eligible for garbage collection always.
        2. Even though object having references sometimes it is eligible for garbage collection.(If all references are internal
        references' ex. Island of isolation)

The ways for requesting JVM to run GC
   Once we made object eligible for GC it may not be destroyed immediately by garbage collector. Whenever JVM runs GC then
   only the objects will be destroyed but when exactly JVM runs GC we cant expect. It is varied from JVM to JVM.
   Instead of waiting until JVM runs garbage collector, we can request JVM to run GC programmatically but whether JVM
   accept our request or not there is no guarantee but most of the time JVM accepts our request. The following are 2 ways
   for requesting JVM to run GC.

   1. By using System class : System.gc();
      System class contains a static method gc(); for this purpose.
   2. By using Runtime class :
      Java application can communicate with JVM by using Runtime object. Runtime class present in java.lang package and it is
      a singleton class. We can create Runtime object by using Runtime.getRuntime() method.

      Runtime r = Runtime.getRuntime();

      once we got runtime object we can call the following methods on that object.

      (i) r.totalMemory() : it returns number of bytes of total memory present in the heap i.e. Heap size
      (ii) r.freeMemory() : it returns number of bytes of free memory present in the heap.
      (iii) r.gc() : for requesting JVM to run garbage collector.

      with respect to performance it is highly recommended to use Runtime r.gc() when compare with System.gc() because
      System.gc() internally call Runtime.gc() method.{ex. Runtime.getRuntime().gc()}

Finalization:
    Just before destroying an object GC calls finalize() to perform clean-up activities. Once finalize method completes
    automatically destroys that object. finalize() present in Object class with the following declaration

        protected void finalize() throws Throwable

    We can override finalize() in our class to define our own clean-up activities.

    Case 1: